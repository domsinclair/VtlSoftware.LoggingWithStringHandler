<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".t.cs" #>
<#
string[] logLevels = { "Trace", "Debug", "Information", "Warning", "Error", "Critical" };
#>
using System.Runtime.CompilerServices;
namespace VtlSoftware.Logging.Net6;

<# foreach (var logLevel in logLevels) { #>

[InterpolatedStringHandler]
public ref struct VtlLogging<#= logLevel #>InterpolatedStringHandler
{
    private readonly VtlLoggingInterpolatedStringHandler handler;

    public VtlLogging<#= logLevel #>InterpolatedStringHandler(int literalLength, int formattedCount, ILogger logger, out bool isEnabled)
    {
        handler = new VtlLoggingInterpolatedStringHandler(literalLength, formattedCount, logger, LogLevel.<#= logLevel #>, out isEnabled);
    }

    public bool IsEnabled => handler.IsEnabled;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AppendLiteral(string s) => handler.AppendLiteral(s);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AppendFormatted<T>(T value, [CallerArgumentExpression("value")] string name = "") => handler.AppendFormatted(value, name);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public (string, object?[]) GetTemplateAndArguments() => handler.GetTemplateAndArguments();
}
<# } #>